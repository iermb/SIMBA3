<?php

namespace SIMBA3\Component\Application\Variable\UseCase;

use PHPUnit\Framework\TestCase;
use SIMBA3\Component\Application\Variable\Request\ReadAllAreaTypeAreaRequest;
use SIMBA3\Component\Application\Variable\Response\ReadAllAreaTypeAreaResponse;
use SIMBA3\Component\Domain\Variable\Entity\TypeArea;
use SIMBA3\Component\Domain\Variable\Repository\AreaRepository;
use SIMBA3\Component\Domain\Variable\Repository\TypeAreaRepository;

class ReadAllAreaTypeAreaUseCaseTest extends TestCase
{
    private ReadAllAreaTypeAreaRequest $areaTypeAreaRequest;
    private ReadAllAreaTypeAreaResponse $readAllAreaTypeAreaResponse;
    private ReadAllAreaTypeAreaUseCase $readAllAreaTypeAreaUseCase;
    private TypeAreaRepository $typeAreaRepository;
    private AreaRepository $areaRepository;
    private TypeArea $typeArea;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->typeAreaRepository = $this->createMock(TypeAreaRepository::class);
        $this->areaRepository = $this->createMock(AreaRepository::class);
        $this->typeArea = $this->createMock(TypeArea::class);
        $this->areaTypeAreaRequest = $this->createMock(ReadAllAreaTypeAreaRequest::class);
        $this->readAllAreaTypeAreaResponse = $this->createMock(ReadAllAreaTypeAreaResponse::class);
    }

    /** @test */
    public function shouldReadAllAreaTypeAreUseCaseExpectsErrorWhenNotExistsTheTypeArea(): void
    {
        $this->givenReadAllAreTypeAreaUseCase();
        $this->whenTypeAreaNotExists();
        $this->thenExpectsError();
        $this->whenExecuteReadAllAreaTypeAreaUseCase();
    }

    /** @test */
    public function shouldReadAllAreaTypeAreUseCaseReturnReadAllAreaTypeAreaResponseWhenIndicatorExists(): void
    {
        $this->givenReadAllAreTypeAreaUseCase();
        $this->whenTypeAreExists();
        $this->thenExpectsReadAllAreaTypeAreaResponseWhenExecuteReadAllAreaTypeAreaUseCase();
    }

    private function givenReadAllAreTypeAreaUseCase(): void
    {
        $this->readAllAreaTypeAreaUseCase = new ReadAllAreaTypeAreaUseCase(
           $this->typeAreaRepository,
           $this->areaRepository
        );
    }

    private function whenTypeAreaNotExists(): void
    {
        $this->typeAreaRepository->method('getTypeArea')->willReturn(null);
        $this->areaTypeAreaRequest->method('getTypeAreaId')->willReturn(1);
    }

    private function thenExpectsError(): void
    {
        $this->expectException(\InvalidArgumentException::class);
    }

    private function whenExecuteReadAllAreaTypeAreaUseCase(): void
    {
        $this->readAllAreaTypeAreaUseCase->execute($this->areaTypeAreaRequest);
    }

    private function whenTypeAreExists(): void
    {
        $this->typeAreaRepository->method('getTypeArea')->willReturn($this->typeArea);
        $this->typeArea->method('getId')->willReturn(1);
    }

    private function thenExpectsReadAllAreaTypeAreaResponseWhenExecuteReadAllAreaTypeAreaUseCase(): void
    {
        $this->assertInstanceOf(
            ReadAllAreaTypeAreaResponse::class,
            $this->readAllAreaTypeAreaUseCase->execute($this->areaTypeAreaRequest)
        );
    }
}