<?php

namespace SIMBA3\Component\Application\Variable\UseCase;

use PHPUnit\Framework\TestCase;
use SIMBA3\Component\Application\Variable\Request\ReadAllIndependentVariableTypeIndependentVariableRequest;
use SIMBA3\Component\Application\Variable\Response\ReadAllIndependentVariableTypeIndependentVariableResponse;
use SIMBA3\Component\Domain\Variable\Entity\IndependentVariable;
use SIMBA3\Component\Domain\Variable\Entity\TypeIndependentVariable;
use SIMBA3\Component\Domain\Variable\Repository\IndependentVariableRepository;
use SIMBA3\Component\Domain\Variable\Repository\TypeIndependentVariableRepository;

class ReadAllIndependentVariableTypeIndependentVariableUseCaseTest extends TestCase
{
    private ReadAllIndependentVariableTypeIndependentVariableUseCase $readAllIndependentVariableTypeIndependentVariableUseCase;
    private TypeIndependentVariableRepository $typeIndependentVariableRepository;
    private IndependentVariableRepository $independentVariableRepository;
    private ReadAllIndependentVariableTypeIndependentVariableRequest $independentVariableTypeIndependentVariableRequest;
    private TypeIndependentVariable $typeIndependentVariable;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->typeIndependentVariableRepository = $this->createMock(TypeIndependentVariableRepository::class);
        $this->independentVariableRepository = $this->createMock(IndependentVariableRepository::class);
        $this->independentVariableTypeIndependentVariableRequest = $this->createMock(ReadAllIndependentVariableTypeIndependentVariableRequest::class);
        $this->typeIndependentVariable = $this->createMock(TypeIndependentVariable::class);
    }

    /** @test */
    public function shouldReadAllIndependentVariableTypeIndependentVariableUseCaseReturnExceptionWhenTypeIndependentVariableNoExists(): void
    {
        $this->givenReadAllIndependentVariableTypeIndependentVariableUseCase();
        $this->whenTypeIndependentVariableNoExists();
        $this->thenReturnException();
    }

    private function givenReadAllIndependentVariableTypeIndependentVariableUseCase(): void
    {
     $this->readAllIndependentVariableTypeIndependentVariableUseCase = new ReadAllIndependentVariableTypeIndependentVariableUseCase(
         $this->typeIndependentVariableRepository,
         $this->independentVariableRepository
     );
    }

    private function whenTypeIndependentVariableNoExists(): void
    {
        $this->independentVariableTypeIndependentVariableRequest->method('getTypeIndependentVariableId')->willReturn(1);
        $this->typeIndependentVariableRepository->method('getTypeIndependentVariable')->willReturn(null);
    }

    private function thenReturnException()
    {
        $this->expectException(\InvalidArgumentException::class);
        $this->readAllIndependentVariableTypeIndependentVariableUseCase->execute(
            $this->independentVariableTypeIndependentVariableRequest
        );
    }
    
    /** @test */
    public function shouldReadAllIndependentVariableTypeIndependentVariableUseCaseReturnReadAllIndependentVariableTypeIndependentVariableResponseWhenTypeIndependentVariableExists(): void
    {
        $this->givenReadAllIndependentVariableTypeIndependentVariableUseCase();
        $this->whenTypeIndependentVariableExists();
        $this->thenReturnReadAllIndependentVariableTypeIndependentVariableResponse();
        
    }

    private function whenTypeIndependentVariableExists(): void
    {
        $this->independentVariableTypeIndependentVariableRequest->method('getTypeIndependentVariableId')->willReturn(2);
        $this->typeIndependentVariable->method('getId')->willReturn(2);
        $this->typeIndependentVariableRepository->method('getTypeIndependentVariable')->willReturn($this->typeIndependentVariable);
        $this->independentVariableRepository->method('getAllIndependentVariableByTypeIndependentVariable')->willReturn([]);
    }

    private function thenReturnReadAllIndependentVariableTypeIndependentVariableResponse(): void
    {
        $this->assertInstanceOf(
            ReadAllIndependentVariableTypeIndependentVariableResponse::class,
            $this->readAllIndependentVariableTypeIndependentVariableUseCase->execute(
                $this->independentVariableTypeIndependentVariableRequest
            )
        );

        // Should we check if return corresponds with "$this->independentVariableRepository->method('getAllIndependentVariableByTypeIndependentVariable')->willReturn([]);"?
    }
}