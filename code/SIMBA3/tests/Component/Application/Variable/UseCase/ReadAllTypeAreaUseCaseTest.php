<?php

namespace SIMBA3\Component\Application\Variable\UseCase;

use PHPUnit\Framework\TestCase;
use SIMBA3\Component\Application\Variable\Request\ReadAllTypeAreaRequest;
use SIMBA3\Component\Application\Variable\Response\ReadAllTypeAreaResponse;
use SIMBA3\Component\Domain\Variable\Entity\TypeArea;
use SIMBA3\Component\Domain\Variable\Repository\TypeAreaRepository;

class ReadAllTypeAreaUseCaseTest extends TestCase
{
    private ReadAllTypeAreaUseCase $readAllTypeAreaUseCase;
    private ReadAllTypeAreaRequest $readAllTypeAreaRequest;
    private TypeAreaRepository $typeAreaRepository;
    private TypeArea $typeArea1;
    private TypeArea $typeArea2;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->typeAreaRepository = $this->createMock(TypeAreaRepository::class);
        $this->readAllTypeAreaRequest = $this->createMock(ReadAllTypeAreaRequest::class);
        $this->typeArea1 = $this->createMock(TypeArea::class);
        $this->typeArea2 = $this->createMock(TypeArea::class);

        $this->readAllTypeAreaRequest->method('getLocale')->willReturn('ca');
    }

    /** @test */
    public function shouldReadAllTypeAreUseCaseExpectsEmptyArrayWhenNotExistsTheTypeArea(): void
    {
        $this->givenReadAllTypeAreaUseCase();
        $this->whenTypeAreaNotExists();
        $this->thenWillReturnReadAllTypeAreaResponse();
    }

    /** @test */
    public function shouldReadAllTypeAreUseCaseReturnReadAllTypeAreaResponseWhenIndicatorExists(): void
    {
        $this->givenReadAllTypeAreaUseCase();
        $this->whenTypeAreaExists();
        $this->thenWillReturnReadAllTypeAreaResponse();
    }

    private function givenReadAllTypeAreaUseCase(): void
    {
        $this->readAllTypeAreaUseCase = new ReadAllTypeAreaUseCase(
            $this->typeAreaRepository
        );
    }

    private function whenTypeAreaNotExists(): void
    {
        $this->typeAreaRepository->method('getAllTypeArea')->willReturn([]);
    }

    private function thenWillReturnReadAllTypeAreaResponse(): void
    {
        $this->assertInstanceOf(
            ReadAllTypeAreaResponse::class,
            $this->readAllTypeAreaUseCase->execute($this->readAllTypeAreaRequest)
        );
    }

    private function whenTypeAreaExists(): void
    {
        $this->typeAreaRepository->method('getAllTypeArea')->willReturn([
            $this->typeArea1,
            $this->typeArea2,
        ]);
    }
}