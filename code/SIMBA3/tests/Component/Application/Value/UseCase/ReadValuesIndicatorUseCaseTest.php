<?php

namespace SIMBA3\Component\Application\Value\UseCase;

use PHPUnit\Framework\TestCase;
use SIMBA3\Component\Application\Value\Request\ReadValuesIndicatorRequest;
use SIMBA3\Component\Domain\Indicator\Entity\Indicator;
use SIMBA3\Component\Domain\Indicator\Repository\IndicatorRepository;
use SIMBA3\Component\Domain\Value\Repository\ValueRepository;

class ReadValuesIndicatorUseCaseTest extends TestCase
{
    private ReadValuesIndicatorUseCase $readValuesIndicatorUseCase;
    private IndicatorRepository $indicatorRepository;
    private ValueRepository $valueRepository;
    private ReadValuesIndicatorRequest $readValuesIndicatorRequest;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->indicatorRepository = $this->createMock(IndicatorRepository::class);
        $this->valueRepository = $this->createMock(ValueRepository::class);
        $this->readValuesIndicatorRequest = $this->createMock(ReadValuesIndicatorRequest::class);
    }

    /** @test */
    public function shouldReadValuesIndicatorUseCaseExpectsErrorWhenNotExistsTheIndicator(): void
    {
        $this->givenAReadValuesIndicatorUseCase();
        $this->whenIndicatorNotExists();
        $this->thenExpectsInvalidArgumentException();
        $this->whenExecuteReadValuesIndicatorUseCase();
    }

    private function givenAReadValuesIndicatorUseCase(): void
    {
        $this->readValuesIndicatorUseCase = new ReadValuesIndicatorUseCase(
            $this->indicatorRepository,
            $this->valueRepository
        );
    }

    private function whenIndicatorNotExists(): void
    {
        $this->indicatorRepository->method("getIndicator")->willReturn(null);
    }

    private function thenExpectsInvalidArgumentException(): void
    {
        $this->expectException(\InvalidArgumentException::class);
    }

    private function whenExecuteReadValuesIndicatorUseCase(): void
    {
        $this->readValuesIndicatorUseCase->execute($this->readValuesIndicatorRequest);
    }
}
