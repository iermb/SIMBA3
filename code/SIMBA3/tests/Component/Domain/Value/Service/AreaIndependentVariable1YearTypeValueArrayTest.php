<?php

namespace SIMBA3\Component\Domain\Value\Service;

use PHPUnit\Framework\TestCase;
use SIMBA3\Component\Domain\Value\Entity\AreaIndependentVariable1YearValue;

class AreaIndependentVariable1YearTypeValueArrayTest extends TestCase
{
    private AreaIndependentVariable1YearTypeValueArray $areaIndependentVariable1YearTypeValueArray;
    private AreaIndependentVariable1YearValue $areaIndependentVariable1YearValue1;
    private AreaIndependentVariable1YearValue $areaIndependentVariable1YearValue2;

    /** @test */
    public function shouldAreaIndependentVariable1YearTypeValueArrayWithoutAreaIndependentVariable1YearValueReturnEmptyArray(): void
    {
        $this->givenAreaIndependentVariable1YearTypeValueArrayWithoutAreaIndependentVariable1YearValue();
        $this->returnEmptyArray();
    }

    private function givenAreaIndependentVariable1YearTypeValueArrayWithoutAreaIndependentVariable1YearValue(): void
    {
        $this->areaIndependentVariable1YearTypeValueArray = new AreaIndependentVariable1YearTypeValueArray([]);
    }

    private function returnEmptyArray()
    {
        $this->assertEquals([], $this->areaIndependentVariable1YearTypeValueArray->getValuesAsArray());
        $this->assertEquals([], $this->areaIndependentVariable1YearTypeValueArray->getValues());
    }

    /** @test */
    public function shouldAreaIndependentVariable1YearTypeValueArrayWithOneAreaIndependentVariable1YearValueReturnReturnArrayWithOneValue(): void
    {
        $this->givenAreaIndependentVariable1YearTypeValueArrayWithOneAreaIndependentVariable1YearValue();
        $this->returnOneElementArray();
    }

    private function givenAreaIndependentVariable1YearTypeValueArrayWithOneAreaIndependentVariable1YearValue(): void
    {
        $this->createAreaIndependentVariable1YearValue();
        $this->areaIndependentVariable1YearTypeValueArray = new AreaIndependentVariable1YearTypeValueArray([$this->areaIndependentVariable1YearValue1]);
    }

    private function createAreaIndependentVariable1YearValue(): void
    {
        $this->areaIndependentVariable1YearValue1->method('getIndicatorId')->willReturn(1);
        $this->areaIndependentVariable1YearValue1->method('getTypeAreaCode')->willReturn(2);
        $this->areaIndependentVariable1YearValue1->method('getAreaCode')->willReturn(3);
        $this->areaIndependentVariable1YearValue1->method('getTypeIndependentVariable1Code')->willReturn(4);
        $this->areaIndependentVariable1YearValue1->method('getIndependentVariable1Code')->willReturn(5);
        $this->areaIndependentVariable1YearValue1->method('getYear')->willReturn(6);
        $this->areaIndependentVariable1YearValue1->method('getValue')->willReturn(7.10);
    }

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->areaIndependentVariable1YearValue1 = $this->createMock(AreaIndependentVariable1YearValue::class);
        $this->areaIndependentVariable1YearValue2 = $this->createMock(AreaIndependentVariable1YearValue::class);
    }

    private function returnOneElementArray(): void
    {
        $this->assertEquals(
            [[ 1, 2, 3, 4, 5, 6, 7.10]],
            $this->areaIndependentVariable1YearTypeValueArray->getValuesAsArray()
        );

        $this->assertEquals([$this->areaIndependentVariable1YearValue1], $this->areaIndependentVariable1YearTypeValueArray->getValues());
    }

    /** @test */
    public function shouldAreaIndependentVariable1YearTypeValueArrayWithTwoAreaIndependentVariable1YearValueReturnReturnArrayWithTwoValues(): void
    {
        $this->givenAreaIndependentVariable1YearTypeValueArrayWithTwoAreaIndependentVariable1YearValue();
        $this->returnTwoElementArray();
    }

    private function givenAreaIndependentVariable1YearTypeValueArrayWithTwoAreaIndependentVariable1YearValue()
    {
        $this->createAreaIndependentVariable1YearValue();
        $this->areaIndependentVariable1YearValue2->method('getIndicatorId')->willReturn(8);
        $this->areaIndependentVariable1YearValue2->method('getTypeAreaCode')->willReturn(9);
        $this->areaIndependentVariable1YearValue2->method('getAreaCode')->willReturn(10);
        $this->areaIndependentVariable1YearValue2->method('getTypeIndependentVariable1Code')->willReturn(11);
        $this->areaIndependentVariable1YearValue2->method('getIndependentVariable1Code')->willReturn(12);
        $this->areaIndependentVariable1YearValue2->method('getYear')->willReturn(13);
        $this->areaIndependentVariable1YearValue2->method('getValue')->willReturn(14.10);

        $this->areaIndependentVariable1YearTypeValueArray = new AreaIndependentVariable1YearTypeValueArray(
            [$this->areaIndependentVariable1YearValue1,$this->areaIndependentVariable1YearValue2]
        );
    }

    private function returnTwoElementArray()
    {
        $this->assertEquals(
            [
                [ 1, 2, 3, 4, 5, 6, 7.10],
                [ 8, 9, 10, 11, 12, 13, 14.10],
            ],
            $this->areaIndependentVariable1YearTypeValueArray->getValuesAsArray()
        );

        $this->assertEquals([$this->areaIndependentVariable1YearValue1,$this->areaIndependentVariable1YearValue2], $this->areaIndependentVariable1YearTypeValueArray->getValues());
    }
}