<?php


namespace SIMBA3\Component\Domain\Value\Service;


use PHPUnit\Framework\TestCase;
use SIMBA3\Component\Domain\Variable\Entity\IndependentVariable;
use SIMBA3\Component\Domain\Variable\Entity\TypeIndependentVariable;

class TypeIndependentVariableSetTest extends TestCase
{
    private TypeIndependentVariableSet $typeIndependentVariableSet;
    private TypeIndependentVariable $typeIndependentVariable;
    private IndependentVariable $independentVariable1;
    private IndependentVariable $independentVariable2;
    private IndependentVariable $independentVariable3;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->typeIndependentVariable = $this->createMock(TypeIndependentVariable::class);
        $this->typeIndependentVariable->method('getCode')->willReturn(100);
        $this->typeIndependentVariable->method('getName')->willReturn('Type independent Variable');

        $this->independentVariable1 = $this->createMock(IndependentVariable::class);
        $this->independentVariable1->method('getCode')->willReturn(1);
        $this->independentVariable1->method('getName')->willReturn('independent Variable 1');
        $this->independentVariable1->method('getType')->willReturn($this->typeIndependentVariable);

        $this->independentVariable2 = $this->createMock(IndependentVariable::class);
        $this->independentVariable2->method('getCode')->willReturn(2);
        $this->independentVariable2->method('getName')->willReturn('independent Variable 2');
        $this->independentVariable2->method('getType')->willReturn($this->typeIndependentVariable);

        $this->independentVariable3 = $this->createMock(IndependentVariable::class);
        $this->independentVariable3->method('getCode')->willReturn(3);
        $this->independentVariable3->method('getName')->willReturn('independent Variable 3');
        $this->independentVariable3->method('getType')->willReturn($this->typeIndependentVariable);
    }

    /** @test */
    public function shouldOneElementTypeIndependentVariableSetReturnsOneElementArray(): void
    {
        $this->givenOneElementTypeIndependentVariableSet();
        $this->thenReturnsOneElementArray();
    }

    /** @test */
    public function shouldTwoElementsTypeIndependentVariableSetReturnsTwoElementsArray(): void
    {
        $this->givenTwoElementTypeIndependentVariableSet();
        $this->thenReturnsTwoElementArray();
    }

    /** @test */
    public function shouldThreeElementsTypeIndependentVariableSetReturnsThreeElementsArray(): void
    {
        $this->givenThreeElementTypeIndependentVariableSet();
        $this->thenReturnsThreeElementArray();
    }

    private function givenOneElementTypeIndependentVariableSet(): void
    {
        $this->typeIndependentVariableSet = new TypeIndependentVariableSet($this->independentVariable1);
    }

    private function thenReturnsOneElementArray(): void
    {
        $this->assertEquals(
            [
                'code' => 100,
                'name' => 'Type independent Variable',
                'independentVariables' => [
                    [
                        'code' => 1,
                        'name' => 'independent Variable 1',
                    ],
                ],
            ],
            $this->typeIndependentVariableSet->getArray()
        );
    }

    private function givenTwoElementTypeIndependentVariableSet(): void
    {
        $this->typeIndependentVariableSet = new TypeIndependentVariableSet($this->independentVariable1);
        $this->typeIndependentVariableSet->addIndependentVariable($this->independentVariable2);
    }

    private function thenReturnsTwoElementArray(): void
    {
        $this->assertEquals(
            [
                'code' => 100,
                'name' => 'Type independent Variable',
                'independentVariables' => [
                    [
                        'code' => 1,
                        'name' => 'independent Variable 1',
                    ],
                    [
                        'code' => 2,
                        'name' => 'independent Variable 2',
                    ],
                ],
            ],
            $this->typeIndependentVariableSet->getArray()
        );
    }

    private function givenThreeElementTypeIndependentVariableSet(): void
    {
        $this->typeIndependentVariableSet = new TypeIndependentVariableSet($this->independentVariable1);
        $this->typeIndependentVariableSet->addIndependentVariable($this->independentVariable2);
        $this->typeIndependentVariableSet->addIndependentVariable($this->independentVariable3);
    }

    private function thenReturnsThreeElementArray(): void
    {
        $this->assertEquals(
            [
                'code' => 100,
                'name' => 'Type independent Variable',
                'independentVariables' => [
                    [
                        'code' => 1,
                        'name' => 'independent Variable 1',
                    ],
                    [
                        'code' => 2,
                        'name' => 'independent Variable 2',
                    ],
                    [
                        'code' => 3,
                        'name' => 'independent Variable 3',
                    ],
                ],
            ],
            $this->typeIndependentVariableSet->getArray()
        );
    }
}