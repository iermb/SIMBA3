<?php

namespace SIMBA3\Component\Domain\Value\Service;

use PHPUnit\Framework\TestCase;
use SIMBA3\Component\Domain\Value\Entity\AreaMonthYearValue;

class AreaMonthYearTypeValueArrayTest extends TestCase
{
    private AreaMonthYearTypeValueArray $areaMonthYearTypeValueArray;
    private AreaMonthYearValue $areaMonthYearValue1;
    private AreaMonthYearValue $areaMonthYearValue2;
    private AreaMonthYearValue $areaMonthYearValue3;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->areaMonthYearValue1 = $this->createMock(AreaMonthYearValue::class);
        $this->areaMonthYearValue1->method('getIndicatorId')->willReturn(1);
        $this->areaMonthYearValue1->method('getTypeAreaCode')->willReturn(10);
        $this->areaMonthYearValue1->method('getAreaCode')->willReturn(100);
        $this->areaMonthYearValue1->method('getMonth')->willReturn(12);
        $this->areaMonthYearValue1->method('getYear')->willReturn(2019);
        $this->areaMonthYearValue1->method('getValue')->willReturn(3.14);

        $this->areaMonthYearValue2 = $this->createMock(AreaMonthYearValue::class);
        $this->areaMonthYearValue2->method('getIndicatorId')->willReturn(2);
        $this->areaMonthYearValue2->method('getTypeAreaCode')->willReturn(20);
        $this->areaMonthYearValue2->method('getAreaCode')->willReturn(200);
        $this->areaMonthYearValue2->method('getMonth')->willReturn(5);
        $this->areaMonthYearValue2->method('getYear')->willReturn(2020);
        $this->areaMonthYearValue2->method('getValue')->willReturn(4.14);

        $this->areaMonthYearValue3 = $this->createMock(AreaMonthYearValue::class);
        $this->areaMonthYearValue3->method('getIndicatorId')->willReturn(3);
        $this->areaMonthYearValue3->method('getTypeAreaCode')->willReturn(20);
        $this->areaMonthYearValue3->method('getAreaCode')->willReturn(200);
        $this->areaMonthYearValue3->method('getMonth')->willReturn(12);
        $this->areaMonthYearValue3->method('getYear')->willReturn(2019);
        $this->areaMonthYearValue3->method('getValue')->willReturn(5.14);
    }

    /** @test */
    public function shouldEmptyAreaMonthYearTypeValueArrayReturnEmptyArray(): void
    {
        $this->givenEmptyAreaMonthYearTypeValueArray();
        $this->thenReturnsEmptyArray();
    }

    private function givenEmptyAreaMonthYearTypeValueArray(): void
    {
        $this->areaMonthYearTypeValueArray =  new AreaMonthYearTypeValueArray([]);
    }

    private function thenReturnsEmptyArray(): void
    {
        $this->assertEquals([],$this->areaMonthYearTypeValueArray->getValues());
        $this->assertEquals([],$this->areaMonthYearTypeValueArray->getValuesAsArray());
        $this->assertEquals([],$this->areaMonthYearTypeValueArray->getAreas());
        $this->assertEquals([],$this->areaMonthYearTypeValueArray->getYears());
        $this->assertEquals([],$this->areaMonthYearTypeValueArray->getMonths());
    }

    /** @test */
    public function shouldOneElementAreaMonthYearTypeValueArrayReturnOneElementArray(): void
    {
        $this->givenOneElementAreaMonthYearTypeValueArray();
        $this->thenReturnsOneElementArray();
    }

    private function givenOneElementAreaMonthYearTypeValueArray(): void
    {
        $this->areaMonthYearTypeValueArray = new AreaMonthYearTypeValueArray([
            $this->areaMonthYearValue1
        ]);
    }

    private function thenReturnsOneElementArray(): void
    {
        $this->assertEquals([
            $this->areaMonthYearValue1
        ],$this->areaMonthYearTypeValueArray->getValues());

        $this->assertEquals([
            [
                1,
                10,
                100,
                2019,
                12,
                3.14,
            ]
        ],$this->areaMonthYearTypeValueArray->getValuesAsArray());

        $this->assertEquals([
            [
                'typeAreaCode' => 10,
                'areaCode' => 100,
            ]
        ],$this->areaMonthYearTypeValueArray->getAreas());

        $this->assertEquals([
            [
                'yearId' => 2019
            ]
        ],$this->areaMonthYearTypeValueArray->getYears());

        $this->assertEquals([
            [
                'monthId' => 12
            ]
        ],$this->areaMonthYearTypeValueArray->getMonths());
    }

    /** @test */
    public function shouldTwoElementAreaMonthYearTypeValueArrayReturnTwoElementsArray(): void
    {
        $this->givenTwoElementAreaYearTypeValuesArray();
        $this->thenReturnsTwoElementsArray();
    }

    private function givenTwoElementAreaYearTypeValuesArray(): void
    {
        $this->areaMonthYearTypeValueArray =  new AreaMonthYearTypeValueArray([
            $this->areaMonthYearValue1,
            $this->areaMonthYearValue2,
        ]);
    }

    private function thenReturnsTwoElementsArray(): void
    {
        $this->assertEquals([
            $this->areaMonthYearValue1,
            $this->areaMonthYearValue2,
        ],$this->areaMonthYearTypeValueArray->getValues());

        $this->assertEquals([
            [
                1,
                10,
                100,
                2019,
                12,
                3.14,
            ],
            [
                2,
                20,
                200,
                2020,
                5,
                4.14,
            ],
        ],$this->areaMonthYearTypeValueArray->getValuesAsArray());

        $this->assertEquals([
            [
                'typeAreaCode' => 10,
                'areaCode' => 100,
            ],[
                'typeAreaCode' => 20,
                'areaCode' => 200,
            ],
        ],$this->areaMonthYearTypeValueArray->getAreas());

        $this->assertEquals([
            [
                'yearId' => 2019
            ],[
                'yearId' => 2020
            ],
        ],$this->areaMonthYearTypeValueArray->getYears());

        $this->assertEquals([
            [
                'monthId' => 12
            ],[
                'monthId' => 5
            ],
        ],$this->areaMonthYearTypeValueArray->getMonths());
    }

    /** @test */
    public function shouldThreeElementAreaMonthYearTypeValueArrayReturnThreeElementsArray(): void
    {
        $this->givenThreeElementAreaYearTypeValuesArray();
        $this->thenReturnsThreeElementsArray();
    }

    private function givenThreeElementAreaYearTypeValuesArray(): void
    {
        $this->areaMonthYearTypeValueArray =  new AreaMonthYearTypeValueArray([
            $this->areaMonthYearValue1,
            $this->areaMonthYearValue2,
            $this->areaMonthYearValue3,
        ]);
    }

    private function thenReturnsThreeElementsArray(): void
    {
        $this->assertEquals([
            $this->areaMonthYearValue1,
            $this->areaMonthYearValue2,
            $this->areaMonthYearValue3,
        ],$this->areaMonthYearTypeValueArray->getValues());

        $this->assertEquals([
            [
                1,
                10,
                100,
                2019,
                12,
                3.14,
            ],
            [
                2,
                20,
                200,
                2020,
                5,
                4.14,
            ],
            [
                3,
                20,
                200,
                2019,
                12,
                5.14,
            ],
        ],$this->areaMonthYearTypeValueArray->getValuesAsArray());

        $this->assertEquals([
            [
                'typeAreaCode' => 10,
                'areaCode' => 100,
            ],[
                'typeAreaCode' => 20,
                'areaCode' => 200,
            ],
        ],$this->areaMonthYearTypeValueArray->getAreas());

        $this->assertEquals([
            [
                'yearId' => 2019
            ],[
                'yearId' => 2020
            ],
        ],$this->areaMonthYearTypeValueArray->getYears());

        $this->assertEquals([
            [
                'monthId' => 12
            ],[
                'monthId' => 5
            ],
        ],$this->areaMonthYearTypeValueArray->getMonths());
    }
}