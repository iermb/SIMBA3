<?php

namespace SIMBA3\Component\Domain\Variable\Service;

use PHPUnit\Framework\TestCase;
use SIMBA3\Component\Domain\Variable\Entity\IndependentVariable;
use SIMBA3\Component\Domain\Variable\Entity\TypeIndependentVariable;

class TypeIndependentVariableCollectionTest extends TestCase
{
    private TypeIndependentVariableCollection $typeIndependentVariableCollection;
    private TypeIndependentVariable $typeIndependentVariable1;
    private TypeIndependentVariable $typeIndependentVariable2;
    private IndependentVariable $independentVariable1;
    private IndependentVariable $independentVariable2;
    private IndependentVariable $independentVariable3;
    private IndependentVariable $independentVariable4;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->typeIndependentVariable1 = $this->createMock(TypeIndependentVariable::class);
        $this->typeIndependentVariable1->method('getId')->willReturn(1);
        $this->typeIndependentVariable1->method('getCode')->willReturn(11);
        $this->typeIndependentVariable1->method('getName')->willReturn('Type Independent Variable 1');

        $this->typeIndependentVariable2 = $this->createMock(TypeIndependentVariable::class);
        $this->typeIndependentVariable2->method('getId')->willReturn(2);
        $this->typeIndependentVariable2->method('getCode')->willReturn(22);
        $this->typeIndependentVariable2->method('getName')->willReturn('Type Independent Variable 2');

        $this->independentVariable1 = $this->createMock(IndependentVariable::class);
        $this->independentVariable1->method('getType')->willReturn($this->typeIndependentVariable1);
        $this->independentVariable1->method('getCode')->willReturn(111);
        $this->independentVariable1->method('getName')->willReturn('Independent Variable 1');

        $this->independentVariable2 = $this->createMock(IndependentVariable::class);
        $this->independentVariable2->method('getType')->willReturn($this->typeIndependentVariable1);
        $this->independentVariable2->method('getCode')->willReturn(222);
        $this->independentVariable2->method('getName')->willReturn('Independent Variable 2');

        $this->independentVariable3 = $this->createMock(IndependentVariable::class);
        $this->independentVariable3->method('getType')->willReturn($this->typeIndependentVariable2);
        $this->independentVariable3->method('getCode')->willReturn(333);
        $this->independentVariable3->method('getName')->willReturn('Independent Variable 3');

        $this->independentVariable4 = $this->createMock(IndependentVariable::class);
        $this->independentVariable4->method('getType')->willReturn($this->typeIndependentVariable2);
        $this->independentVariable4->method('getCode')->willReturn(444);
        $this->independentVariable4->method('getName')->willReturn('Independent Variable 4');
    }
    
    /** @test */
    public function shouldEmptyIndependentVariableCollectionReturnEmptyArray(): void
    {
        $this->givenEmptyIndependentVariableCollection();
        $this->thenReturnsEmptyArray();
    }

    private function givenEmptyIndependentVariableCollection(): void
    {
        $this->typeIndependentVariableCollection = new TypeIndependentVariableCollection([]);
    }

    private function thenReturnsEmptyArray(): void
    {
        $this->assertEquals([],$this->typeIndependentVariableCollection->getIndependentVariableAsArray());
    }

    /** @test */
    public function shouldOneElementIndependentVariableCollectionReturnOneElementArray(): void
    {
        $this->givenOneElementIndependentVariableCollection();
        $this->thenReturnsOneElementArray();
    }

    private function givenOneElementIndependentVariableCollection()
    {
        $this->typeIndependentVariableCollection = new TypeIndependentVariableCollection([$this->independentVariable1]);
    }

    private function thenReturnsOneElementArray()
    {
        $this->assertEquals([
            [
                'code' => 11,
                'name' => 'Type Independent Variable 1',
                'independentVariables' => [
                  [
                      'code' => 111,
                      'name' => 'Independent Variable 1',
                  ],
                ],
            ]
        ],
        $this->typeIndependentVariableCollection->getIndependentVariableAsArray());
    }

    /** @test */
    public function shouldTwoElementIndependentVariableCollectionReturnTwoElementArray(): void
    {
        $this->givenTwoElementIndependentVariableCollection();
        $this->thenReturnsTwoElementArray();
    }

    private function givenTwoElementIndependentVariableCollection()
    {
        $this->typeIndependentVariableCollection = new TypeIndependentVariableCollection([
            $this->independentVariable1,
            $this->independentVariable2,
        ]);
    }

    private function thenReturnsTwoElementArray()
    {
        $this->assertEquals([
            [
                'code' => 11,
                'name' => 'Type Independent Variable 1',
                'independentVariables' => [
                    [
                        'code' => 111,
                        'name' => 'Independent Variable 1',
                    ],
                    [
                        'code' => 222,
                        'name' => 'Independent Variable 2',
                    ],
                ],
            ]
        ],
            $this->typeIndependentVariableCollection->getIndependentVariableAsArray());
    }

    /** @test */
    public function shouldThreeElementIndependentVariableCollectionReturnThreeElementArray(): void
    {
        $this->givenThreeElementIndependentVariableCollection();
        $this->thenReturnsThreeElementArray();
    }

    private function givenThreeElementIndependentVariableCollection()
    {
        $this->typeIndependentVariableCollection = new TypeIndependentVariableCollection([
            $this->independentVariable1,
            $this->independentVariable2,
            $this->independentVariable3,
        ]);
    }

    private function thenReturnsThreeElementArray()
    {
        $this->assertEquals([
            [
                'code' => 11,
                'name' => 'Type Independent Variable 1',
                'independentVariables' => [
                    [
                        'code' => 111,
                        'name' => 'Independent Variable 1',
                    ],
                    [
                        'code' => 222,
                        'name' => 'Independent Variable 2',
                    ],
                ],
            ],
            [
                'code' => 22,
                'name' => 'Type Independent Variable 2',
                'independentVariables' => [
                    [
                        'code' => 333,
                        'name' => 'Independent Variable 3',
                    ],
                ],
            ]
        ],
            $this->typeIndependentVariableCollection->getIndependentVariableAsArray());
    }

    /** @test */
    public function shouldFourElementIndependentVariableCollectionReturnFourElementArray(): void
    {
        $this->givenFourElementIndependentVariableCollection();
        $this->thenReturnsFourElementArray();
    }

    private function givenFourElementIndependentVariableCollection()
    {
        $this->typeIndependentVariableCollection = new TypeIndependentVariableCollection([
            $this->independentVariable1,
            $this->independentVariable2,
            $this->independentVariable3,
            $this->independentVariable4,
        ]);
    }

    private function thenReturnsFourElementArray()
    {
        $this->assertEquals([
            [
                'code' => 11,
                'name' => 'Type Independent Variable 1',
                'independentVariables' => [
                    [
                        'code' => 111,
                        'name' => 'Independent Variable 1',
                    ],
                    [
                        'code' => 222,
                        'name' => 'Independent Variable 2',
                    ],
                ],
            ],
            [
                'code' => 22,
                'name' => 'Type Independent Variable 2',
                'independentVariables' => [
                    [
                        'code' => 333,
                        'name' => 'Independent Variable 3',
                    ],
                    [
                        'code' => 444,
                        'name' => 'Independent Variable 4',
                    ],
                ],
            ]
        ],
            $this->typeIndependentVariableCollection->getIndependentVariableAsArray());
    }
}