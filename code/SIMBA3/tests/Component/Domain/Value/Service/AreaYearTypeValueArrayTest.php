<?php

namespace SIMBA3\Component\Domain\Value\Service;

use PHPUnit\Framework\TestCase;
use SIMBA3\Component\Domain\Value\Entity\AreaYearValue;

class AreaYearTypeValueArrayTest extends TestCase
{
    private AreaYearTypeValueArray $areaYearTypeValueArray;
    private AreaYearValue $areaYearValue1;
    private AreaYearValue $areaYearValue2;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->areaYearValue1 = $this->createMock(AreaYearValue::class);
        $this->areaYearValue2 = $this->createMock(AreaYearValue::class);
    }

    /** @test */
    public function shouldAreaYearTypeValueArrayWithoutAreaYearValueReturnEmptyArray(): void
    {
        $this->givenAnAreaYearTypeValueArrayWithoutAreaYearValue();
        $this->thenReturnAnEmptyArray();
    }

    /** @test */
    public function shouldAreaYearTypeValueArrayWithOneAreaYearValueReturnArrayWithOneValue(): void
    {
        $this->givenAnAreaYearTypeValueArrayWithOneAreaYearValue();
        $this->givenAnAreaYearValue1();
        $this->thenReturnAnArrayWithOneElement();
    }

    /** @test */
    public function shouldAreaYearTypeValueArrayWithOneAreaYearValueReturnArrayWithTwoValues(): void
    {
        $this->givenAnAreaYearTypeValueArrayWithTwoAreaYearValue();
        $this->givenAnAreaYearValue1();
        $this->givenAnAreaYearValue2();
        $this->thenReturnAnArrayWithTwoElements();
    }

    private function givenAnAreaYearTypeValueArrayWithoutAreaYearValue(): void
    {
        $this->areaYearTypeValueArray = new AreaYearTypeValueArray(array());
    }

    private function givenAnAreaYearTypeValueArrayWithOneAreaYearValue(): void
    {
        $this->areaYearTypeValueArray = new AreaYearTypeValueArray(array($this->areaYearValue1));
    }

    private function givenAnAreaYearTypeValueArrayWithTwoAreaYearValue(): void
    {
        $this->areaYearTypeValueArray = new AreaYearTypeValueArray(array($this->areaYearValue1, $this->areaYearValue2));
    }

    private function givenAnAreaYearValue1(): void
    {
        $this->areaYearValue1->method("getIndicatorId")->willReturn(1001);
        $this->areaYearValue1->method("getAreaTypeId")->willReturn(102);
        $this->areaYearValue1->method("getAreaId")->willReturn(9);
        $this->areaYearValue1->method("getYear")->willReturn(2009);
        $this->areaYearValue1->method("getValue")->willReturn(34.5);
    }

    private function givenAnAreaYearValue2(): void
    {
        $this->areaYearValue2->method("getIndicatorId")->willReturn(1005);
        $this->areaYearValue2->method("getAreaTypeId")->willReturn(105);
        $this->areaYearValue2->method("getAreaId")->willReturn(8019);
        $this->areaYearValue2->method("getYear")->willReturn(2005);
        $this->areaYearValue2->method("getValue")->willReturn(3432.55);
    }

    private function thenReturnAnEmptyArray(): void
    {
        $this->assertEquals([], $this->areaYearTypeValueArray->getValuesAsArray());
    }

    private function thenReturnAnArrayWithOneElement(): void
    {
        $this->assertEquals([[1001, 102, 9, 2009, 34.5]], $this->areaYearTypeValueArray->getValuesAsArray());
    }

    private function thenReturnAnArrayWithTwoElements(): void
    {
        $this->assertEquals(
            [[1001, 102, 9, 2009, 34.5], [1005, 105, 8019, 2005, 3432.55]],
            $this->areaYearTypeValueArray->getValuesAsArray()
        );
    }

}
