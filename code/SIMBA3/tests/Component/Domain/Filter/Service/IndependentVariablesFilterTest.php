<?php

namespace Component\Domain\Filter\Service;

use PHPUnit\Framework\TestCase;
use SIMBA3\Component\Domain\Filter\Service\IndependentVariableFilter;
use SIMBA3\Component\Domain\Filter\Service\IndependentVariablesFilter;

class IndependentVariablesFilterTest extends TestCase
{
    private IndependentVariablesFilter $independentVariablesFilter;
    private IndependentVariableFilter $independentVariableFilter1;
    private IndependentVariableFilter $independentVariableFilter2;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->independentVariableFilter1 = $this->createMock(IndependentVariableFilter::class);
        $this->independentVariableFilter2 = $this->createMock(IndependentVariableFilter::class);
    }

    /** @test */
    public function shouldEmptyIndependentVariablesFilterReturnEmptyArray(): void
    {
        $this->givenIndependentVariablesFilterWithEmptyIndependentVariableFilter();
        $this->thenReturnEmptyArray();
    }

    private function givenIndependentVariablesFilterWithEmptyIndependentVariableFilter(): void
    {
        $this->independentVariablesFilter = new IndependentVariablesFilter([],'nameOfFilter');
    }

    private function thenReturnEmptyArray(): void
    {
        $this->assertEquals(
            ['nameOfFilter' => []],
            $this->independentVariablesFilter->getFilterAsArray()
        );
    }
    
    /** @test */
    public function shouldIndependentVariablesFilterWithAnElementReturnArrayWithOneElement(): void
    {
        $this->givenIndependentVariablesFilterWithOneElementIndependentVariableFilter();
        $this->thenReturnArrayWithOneElement();
    }

    private function givenIndependentVariablesFilterWithOneElementIndependentVariableFilter(): void
    {
        $this->createIndependentVariableFilter1();
        $this->independentVariablesFilter = new IndependentVariablesFilter([$this->independentVariableFilter1],'nameOfFilter2');
    }

    private function createIndependentVariableFilter1(): void
    {
        $this->independentVariableFilter1->method('getFilterAsArray')->willReturn([
            "typeIndependentVariableId" => 999,
            "independentVariableId" => 666,
        ]);
    }

    private function thenReturnArrayWithOneElement(): void
    {
        $this->assertEquals(
            [
                'nameOfFilter2' => [
                    [
                        "typeIndependentVariableId" => 999,
                        "independentVariableId" => 666,
                    ]
                ]
            ],
            $this->independentVariablesFilter->getFilterAsArray()
        );
    }

    /** @test */
    public function shouldIndependentVariablesFilterWithTwoElementReturnArrayWithTwoElements(): void
    {
        $this->givenIndependentVariablesFilterWithTwoElementsIndependentVariableFilter();
        $this->thenReturnArrayWithTwoElement();
    }

    private function givenIndependentVariablesFilterWithTwoElementsIndependentVariableFilter(): void
    {
        $this->createIndependentVariableFilter1();

        $this->independentVariableFilter2->method('getFilterAsArray')->willReturn([
            "typeIndependentVariableId" => 555,
            "independentVariableId" => 222,
        ]);

        $this->independentVariablesFilter = new IndependentVariablesFilter(
            [$this->independentVariableFilter1, $this->independentVariableFilter2],
            'nameOfFilter3'
        );
    }

    private function thenReturnArrayWithTwoElement(): void
    {
        $this->assertEquals(
            [
                'nameOfFilter3' => [
                    [
                        "typeIndependentVariableId" => 999,
                        "independentVariableId" => 666,
                    ],
                    [
                        "typeIndependentVariableId" => 555,
                        "independentVariableId" => 222,
                    ],
                ]
            ],
            $this->independentVariablesFilter->getFilterAsArray()
        );
    }
}