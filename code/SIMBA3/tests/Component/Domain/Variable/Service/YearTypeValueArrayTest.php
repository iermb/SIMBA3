<?php

namespace SIMBA3\Component\Domain\Variable\Service;

use PHPUnit\Framework\TestCase;
use SIMBA3\Component\Domain\Value\Entity\YearValue;

class YearTypeValueArrayTest extends TestCase
{
    private YearTypeValueArray $yearTypeValueArray;
    private YearValue $yearValue1;
    private YearValue $yearValue2;
    private YearValue $yearValue3;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->yearValue1 = $this->createMock(YearValue::class);
        $this->yearValue1->method('getIndicatorId')->willReturn(1);
        $this->yearValue1->method('getYear')->willReturn(2019);
        $this->yearValue1->method('getValue')->willReturn(3.14);

        $this->yearValue2 = $this->createMock(YearValue::class);
        $this->yearValue2->method('getIndicatorId')->willReturn(2);
        $this->yearValue2->method('getYear')->willReturn(2020);
        $this->yearValue2->method('getValue')->willReturn(4.14);

        $this->yearValue3 = $this->createMock(YearValue::class);
        $this->yearValue3->method('getIndicatorId')->willReturn(3);
        $this->yearValue3->method('getYear')->willReturn(2019);
        $this->yearValue3->method('getValue')->willReturn(5.14);
    }

    /** @test */
    public function shouldEmptyYearTypeValueArrayReturnEmptyArray(): void
    {
        $this->givenEmptyYearTypeValueArray();
        $this->thenReturnsEmptyArray();
    }

    private function givenEmptyYearTypeValueArray(): void
    {
        $this->yearTypeValueArray =  new YearTypeValueArray([]);
    }

    private function thenReturnsEmptyArray(): void
    {
        $this->assertEquals([],$this->yearTypeValueArray->getValues());
        $this->assertEquals([],$this->yearTypeValueArray->getValuesAsArray());
        $this->assertEquals([],$this->yearTypeValueArray->getYears());
    }

    /** @test */
    public function shouldOneElementYearTypeValueArrayReturnOneElementArray(): void
    {
        $this->givenOneElementYearTypeValueArray();
        $this->thenReturnsOneElementArray();
    }

    private function givenOneElementYearTypeValueArray(): void
    {
        $this->yearTypeValueArray =  new YearTypeValueArray([
            $this->yearValue1
        ]);
    }

    private function thenReturnsOneElementArray(): void
    {
        $this->assertEquals([
            $this->yearValue1
        ],$this->yearTypeValueArray->getValues());

        $this->assertEquals([
            [
                1,
                2019,
                3.14,
            ]
        ],$this->yearTypeValueArray->getValuesAsArray());

        $this->assertEquals([
            [
                'yearId' => 2019
            ]
        ],$this->yearTypeValueArray->getYears());
    }

    /** @test */
    public function shouldTwoElementYearTypeValueArrayReturnTwoElementsArray(): void
    {
        $this->givenTwoElementYearTypeValuesArray();
        $this->thenReturnsTwoElementsArray();
    }

    private function givenTwoElementYearTypeValuesArray(): void
    {
        $this->yearTypeValueArray =  new YearTypeValueArray([
            $this->yearValue1,
            $this->yearValue2,
        ]);
    }

    private function thenReturnsTwoElementsArray(): void
    {
        $this->assertEquals([
            $this->yearValue1,
            $this->yearValue2,
        ],$this->yearTypeValueArray->getValues());

        $this->assertEquals([
            [
                1,
                2019,
                3.14,
            ],
            [
                2,
                2020,
                4.14,
            ],
        ],$this->yearTypeValueArray->getValuesAsArray());

        $this->assertEquals([
            [
                'yearId' => 2019
            ],[
                'yearId' => 2020
            ],
        ],$this->yearTypeValueArray->getYears());
    }

    /** @test */
    public function shouldThreeElementYearTypeValueArrayReturnThreeElementsArray(): void
    {
        $this->givenThreeElementYearTypeValuesArray();
        $this->thenReturnsThreeElementsArray();
    }

    private function givenThreeElementYearTypeValuesArray(): void
    {
        $this->yearTypeValueArray =  new YearTypeValueArray([
            $this->yearValue1,
            $this->yearValue2,
            $this->yearValue3,
        ]);
    }

    private function thenReturnsThreeElementsArray(): void
    {
        $this->assertEquals([
            $this->yearValue1,
            $this->yearValue2,
            $this->yearValue3,
        ],$this->yearTypeValueArray->getValues());

        $this->assertEquals([
            [
                1,
                2019,
                3.14,
            ],
            [
                2,
                2020,
                4.14,
            ],
            [
                3,
                2019,
                5.14,
            ],
        ],$this->yearTypeValueArray->getValuesAsArray());

        $this->assertEquals([
            [
                'yearId' => 2019
            ],[
                'yearId' => 2020
            ],
        ],$this->yearTypeValueArray->getYears());
    }
}