<?php

namespace Component\Domain\Variable\Service;

use PHPUnit\Framework\TestCase;
use SIMBA3\Component\Domain\Variable\Service\YearDictionary;
use SIMBA3\Component\Domain\Variable\Entity\Year;

class YearDictionaryTest extends TestCase
{
    private YearDictionary $yearDictionary;
    private Year $year1;
    private Year $year2;
    private Year $year3;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->year1 = $this->createMock(Year::class);
        $this->year2 = $this->createMock(Year::class);
        $this->year3 = $this->createMock(Year::class);
    }

    /** @test */
    public function shouldYearDictionaryReturnDictionaryYearAsArray(): void
    {
        $this->givenAYearDictionary();
        $this->thenReturnDictionaryYearsAsArray();
    }

    private function givenAYearDictionary(): void
    {
        $this->year1->method('getId')->willReturn(2018);
        $this->year1->method('getYear')->willReturn(2018);
        $this->year2->method('getId')->willReturn(2019);
        $this->year2->method('getYear')->willReturn(2019);
        $this->year3->method('getId')->willReturn(2020);
        $this->year3->method('getYear')->willReturn(2020);

        $this->yearDictionary = new YearDictionary([$this->year1,$this->year2, $this->year3]);
    }

    private function thenReturnDictionaryYearsAsArray(): void
    {
        $this->assertEquals([
            ["yearId" => 2018, "yearName" => 2018],
            ["yearId" => 2019, "yearName" => 2019],
            ["yearId" => 2020, "yearName" => 2020]
        ], $this->yearDictionary->getDictionaryValuesAsArray());
    }
}
