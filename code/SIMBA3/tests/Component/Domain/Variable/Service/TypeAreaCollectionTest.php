<?php

namespace SIMBA3\Component\Domain\Variable\Service;

use PHPUnit\Framework\TestCase;
use SIMBA3\Component\Domain\Variable\Entity\Area;
use SIMBA3\Component\Domain\Variable\Entity\TypeArea;

class TypeAreaCollectionTest extends TestCase
{
    private TypeAreaCollection $typeAreaCollection;
    private Area $area1;
    private Area $area2;
    private Area $area3;
    private Area $area4;
    private TypeArea $typeArea1;
    private TypeArea $typeArea2;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->area1 = $this->createMock(Area::class);
        $this->area2 = $this->createMock(Area::class);
        $this->area3 = $this->createMock(Area::class);
        $this->area4 = $this->createMock(Area::class);
        $this->typeArea1 = $this->createMock(TypeArea::class);
        $this->typeArea2 = $this->createMock(TypeArea::class);
    }

    /** @test */
    public function shouldEmptyTypeAreaCollectionReturnEmptyArray(): void
    {
        $this->givenEmptyTypeAreaCollection();
        $this->thenReturnEmptyArray();
    }

    /** @test */
    public function shouldOneElementTypeAreaCollectionReturnOneElementArray(): void
    {
        $this->givenOneElementTypeAreaCollection();
        $this->thenReturnOneElementArray();
    }

    /** @test */
    public function shouldTwoElementTypeAreaSetReturnTwoElementArray(): void
    {
        $this->givenTwoElementTypeAreaSet();
        $this->thenReturnTwoElementArray();
    }

    /** @test */
    public function shouldThreeElementTypeAreaSetReturnThreeElementArray(): void
    {
        $this->givenThreeElementTypeAreaSet();
        $this->thenReturnThreeElementArray();
    }

    /** @test */
    public function shouldFourElementTypeAreaSetReturnFourElementArray(): void
    {
        $this->givenFourElementTypeAreaSet();
        $this->thenReturnFourElementArray();
    }

    private function givenEmptyTypeAreaCollection():void
    {
        $this->typeAreaCollection = new TypeAreaCollection([]);
    }

    private function thenReturnEmptyArray(): void
    {
        $this->assertEquals([], $this->typeAreaCollection->getAreaAsArray());
    }

    private function givenOneElementTypeAreaCollection()
    {
        $this->createType1();
        $this->createArea1Type1();
        $this->typeAreaCollection = new TypeAreaCollection([$this->area1]);
    }

    private function givenTwoElementTypeAreaSet()
    {
        $this->createType1();
        $this->createArea1Type1();
        $this->createArea2Type1();
        $this->typeAreaCollection = new TypeAreaCollection([
            $this->area1,
            $this->area2,
        ]);
    }

    private function givenThreeElementTypeAreaSet()
    {
        $this->createType1();
        $this->createArea1Type1();
        $this->createArea2Type1();
        $this->createType2();
        $this->createArea3Type2();
        $this->typeAreaCollection = new TypeAreaCollection([
            $this->area1,
            $this->area2,
            $this->area3,
        ]);
    }

    private function givenFourElementTypeAreaSet()
    {
        $this->createType1();
        $this->createArea1Type1();
        $this->createArea2Type1();
        $this->createType2();
        $this->createArea3Type2();
        $this->createArea4Type2();
        $this->typeAreaCollection = new TypeAreaCollection([
            $this->area1,
            $this->area2,
            $this->area3,
            $this->area4,
        ]);
    }

    private function createType1(): void
    {
        $this->typeArea1->method('getCode')->willReturn(11);
        $this->typeArea1->method('getId')->willReturn(111);
        $this->typeArea1->method('getName')->willReturn('Type Area 1');
    }

    private function createType2(): void
    {
        $this->typeArea2->method('getCode')->willReturn(22);
        $this->typeArea2->method('getId')->willReturn(222);
        $this->typeArea2->method('getName')->willReturn('Type Area 2');
    }

    private function createArea1Type1(): void
    {
        $this->area1->method('getType')->willReturn($this->typeArea1);
        $this->area1->method('getCode')->willReturn(1);
        $this->area1->method('getName')->willReturn('Area name 1');
    }

    private function createArea2Type1(): void
    {
        $this->area2->method('getType')->willReturn($this->typeArea1);
        $this->area2->method('getCode')->willReturn(2);
        $this->area2->method('getName')->willReturn('Area name 2');
    }

    private function createArea3Type2(): void
    {
        $this->area3->method('getType')->willReturn($this->typeArea2);
        $this->area3->method('getCode')->willReturn(3);
        $this->area3->method('getName')->willReturn('Area name 3');
    }

    private function createArea4Type2(): void
    {
        $this->area4->method('getType')->willReturn($this->typeArea2);
        $this->area4->method('getCode')->willReturn(4);
        $this->area4->method('getName')->willReturn('Area name 4');
    }

    private function thenReturnOneElementArray()
    {
        $this->assertEquals(
            [
                [
                    'code' => 11,
                    'name' => 'Type Area 1',
                    "areas" => [
                        [
                            'code' => 1,
                            'name' => 'Area name 1',
                        ]
                    ]
                ]
            ],
            $this->typeAreaCollection->getAreaAsArray());
    }

    private function thenReturnTwoElementArray()
    {
        $this->assertEquals(
            [
                [
                    'code' => 11,
                    'name' => 'Type Area 1',
                    "areas" => [
                        [
                            'code' => 1,
                            'name' => 'Area name 1',
                        ],
                        [
                            'code' => 2,
                            'name' => 'Area name 2',
                        ],
                    ]
                ]
            ],
            $this->typeAreaCollection->getAreaAsArray());
    }

    private function thenReturnThreeElementArray()
    {
        $this->assertEquals(
            [
                [
                    'code' => 11,
                    'name' => 'Type Area 1',
                    "areas" => [
                        [
                            'code' => 1,
                            'name' => 'Area name 1',
                        ],
                        [
                            'code' => 2,
                            'name' => 'Area name 2',
                        ],
                    ]
                ],
                [
                    'code' => 22,
                    'name' => 'Type Area 2',
                    "areas" => [
                        [
                            'code' => 3,
                            'name' => 'Area name 3',
                        ],
                    ]
                ],
            ],
            $this->typeAreaCollection->getAreaAsArray()
        );
    }

    private function thenReturnFourElementArray()
    {
        $this->assertEquals(
            [
                [
                    'code' => 11,
                    'name' => 'Type Area 1',
                    "areas" => [
                        [
                            'code' => 1,
                            'name' => 'Area name 1',
                        ],
                        [
                            'code' => 2,
                            'name' => 'Area name 2',
                        ],
                    ]
                ],
                [
                    'code' => 22,
                    'name' => 'Type Area 2',
                    "areas" => [
                        [
                            'code' => 3,
                            'name' => 'Area name 3',
                        ],
                        [
                            'code' => 4,
                            'name' => 'Area name 4',
                        ],
                    ]
                ],
            ],
            $this->typeAreaCollection->getAreaAsArray()
        );
    }
}