<?php

namespace SIMBA3\Component\Domain\Variable\Service;

use PHPUnit\Framework\TestCase;
use SIMBA3\Component\Domain\Value\Entity\AreaYearValue;

class AreaYearTypeValueArrayTest extends TestCase
{
    private AreaYearTypeValueArray $areaYearTypeValueArray;
    private AreaYearValue $areaYearValue1;
    private AreaYearValue $areaYearValue2;
    private AreaYearValue $areaYearValue3;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->areaYearValue1 = $this->createMock(AreaYearValue::class);
        $this->areaYearValue1->method('getIndicatorId')->willReturn(1);
        $this->areaYearValue1->method('getTypeAreaCode')->willReturn(10);
        $this->areaYearValue1->method('getAreaCode')->willReturn(100);
        $this->areaYearValue1->method('getYear')->willReturn(2019);
        $this->areaYearValue1->method('getValue')->willReturn(3.14);

        $this->areaYearValue2 = $this->createMock(AreaYearValue::class);
        $this->areaYearValue2->method('getIndicatorId')->willReturn(2);
        $this->areaYearValue2->method('getTypeAreaCode')->willReturn(20);
        $this->areaYearValue2->method('getAreaCode')->willReturn(200);
        $this->areaYearValue2->method('getYear')->willReturn(2020);
        $this->areaYearValue2->method('getValue')->willReturn(4.14);

        $this->areaYearValue3 = $this->createMock(AreaYearValue::class);
        $this->areaYearValue3->method('getIndicatorId')->willReturn(3);
        $this->areaYearValue3->method('getTypeAreaCode')->willReturn(20);
        $this->areaYearValue3->method('getAreaCode')->willReturn(200);
        $this->areaYearValue3->method('getYear')->willReturn(2019);
        $this->areaYearValue3->method('getValue')->willReturn(5.14);
    }

    /** @test */
    public function shouldEmptyAreaYearTypeValueArrayReturnEmptyArray(): void
    {
        $this->givenEmptyAreaYearTypeValueArray();
        $this->thenReturnsEmptyArray();
    }

    private function givenEmptyAreaYearTypeValueArray(): void
    {
        $this->areaYearTypeValueArray =  new AreaYearTypeValueArray([]);
    }

    private function thenReturnsEmptyArray(): void
    {
        $this->assertEquals([],$this->areaYearTypeValueArray->getValues());
        $this->assertEquals([],$this->areaYearTypeValueArray->getValuesAsArray());
        $this->assertEquals([],$this->areaYearTypeValueArray->getAreas());
        $this->assertEquals([],$this->areaYearTypeValueArray->getYears());
    }

    /** @test */
    public function shouldOneElementAreaYearTypeValueArrayReturnOneElementArray(): void
    {
        $this->givenOneElementAreaYearTypeValueArray();
        $this->thenReturnsOneElementArray();
    }

    private function givenOneElementAreaYearTypeValueArray(): void
    {
        $this->areaYearTypeValueArray =  new AreaYearTypeValueArray([
            $this->areaYearValue1
        ]);
    }

    private function thenReturnsOneElementArray(): void
    {
        $this->assertEquals([
            $this->areaYearValue1
        ],$this->areaYearTypeValueArray->getValues());

        $this->assertEquals([
            [
                1,
                10,
                100,
                2019,
                3.14,
            ]
        ],$this->areaYearTypeValueArray->getValuesAsArray());

        $this->assertEquals([
            [
                'typeAreaCode' => 10,
                'areaCode' => 100,
            ]
        ],$this->areaYearTypeValueArray->getAreas());

        $this->assertEquals([
            [
                'yearId' => 2019
            ]
        ],$this->areaYearTypeValueArray->getYears());
    }

    /** @test */
    public function shouldTwoElementAreaYearTypeValueArrayReturnTwoElementsArray(): void
    {
        $this->givenTwoElementAreaYearTypeValuesArray();
        $this->thenReturnsTwoElementsArray();
    }

    private function givenTwoElementAreaYearTypeValuesArray(): void
    {
        $this->areaYearTypeValueArray =  new AreaYearTypeValueArray([
            $this->areaYearValue1,
            $this->areaYearValue2,
        ]);
    }

    private function thenReturnsTwoElementsArray(): void
    {
        $this->assertEquals([
            $this->areaYearValue1,
            $this->areaYearValue2,
        ],$this->areaYearTypeValueArray->getValues());

        $this->assertEquals([
            [
                1,
                10,
                100,
                2019,
                3.14,
            ],
            [
                2,
                20,
                200,
                2020,
                4.14,
            ],
        ],$this->areaYearTypeValueArray->getValuesAsArray());

        $this->assertEquals([
            [
                'typeAreaCode' => 10,
                'areaCode' => 100,
            ],[
                'typeAreaCode' => 20,
                'areaCode' => 200,
            ],
        ],$this->areaYearTypeValueArray->getAreas());

        $this->assertEquals([
            [
                'yearId' => 2019
            ],[
                'yearId' => 2020
            ],
        ],$this->areaYearTypeValueArray->getYears());
    }

    /** @test */
    public function shouldThreeElementAreaYearTypeValueArrayReturnThreeElementsArray(): void
    {
        $this->givenThreeElementAreaYearTypeValuesArray();
        $this->thenReturnsThreeElementsArray();
    }

    private function givenThreeElementAreaYearTypeValuesArray(): void
    {
        $this->areaYearTypeValueArray =  new AreaYearTypeValueArray([
            $this->areaYearValue1,
            $this->areaYearValue2,
            $this->areaYearValue3,
        ]);
    }

    private function thenReturnsThreeElementsArray(): void
    {
        $this->assertEquals([
            $this->areaYearValue1,
            $this->areaYearValue2,
            $this->areaYearValue3,
        ],$this->areaYearTypeValueArray->getValues());

        $this->assertEquals([
            [
                1,
                10,
                100,
                2019,
                3.14,
            ],
            [
                2,
                20,
                200,
                2020,
                4.14,
            ],
            [
                3,
                20,
                200,
                2019,
                5.14,
            ],
        ],$this->areaYearTypeValueArray->getValuesAsArray());

        $this->assertEquals([
            [
                'typeAreaCode' => 10,
                'areaCode' => 100,
            ],[
                'typeAreaCode' => 20,
                'areaCode' => 200,
            ],
        ],$this->areaYearTypeValueArray->getAreas());

        $this->assertEquals([
            [
                'yearId' => 2019
            ],[
                'yearId' => 2020
            ],
        ],$this->areaYearTypeValueArray->getYears());
    }
}